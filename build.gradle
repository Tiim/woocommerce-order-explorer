import okhttp3.MultipartBody
import okhttp3.OkHttpClient
import okhttp3.Request

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.squareup.okhttp3:okhttp:3.14.2'
    }
}

plugins {
  id "java"
  id "org.openjfx.javafxplugin" version "0.0.7"
}

group 'ch.scbirs.shop'
def desc = 'git describe --tags --long'.execute().text.trim()
if (desc.isEmpty()) {
    desc = 'v0.0.0-0-nogitcommit'
}
println("Git describe: $desc")
def gitversion = desc.split("-").toList()
def gitsha = gitversion.pop() // get sha
def commits = gitversion.pop() // get commits since tag
def ver = gitversion.join("-").substring(1) // get tag minus first character
def fullver = ver + "+" + commits + "." + gitsha
if (commits != "0") {
    version fullver
} else {
    version ver
}



sourceCompatibility = 1.12 
targetCompatibility = 1.12



repositories {
    mavenCentral()
}

dependencies {
    compile 'com.squareup.okhttp3:okhttp:3.10.0'

    compile 'com.fasterxml.jackson.core:jackson-core:2.9.9'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.9'

    compile 'com.google.guava:guava:28.0-jre'
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.commons:commons-lang3:3.9'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'

    compile 'org.apache.poi:poi:4.1.0'

    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.15'
    compile 'com.github.dhorions:boxable:1.5'

    compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1u2'

    compile group: 'com.github.zafarkhaja', name: 'java-semver', version: '0.9.0'

    runtime group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.11.2'
    runtime group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.12.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'ch.scbirs.shop.orderexplorer.OrderExplorer'
        attributes 'Specification-Version': ver
        attributes 'Implementation-Version': fullver
    }
}

javafx {
    version = "12"
    modules = [
        'javafx.controls',
        'javafx.base',
        'javafx.fxml',
        'javafx.graphics',
        'javafx.web',
        'javafx.swing'
    ]
}

gradle.buildFinished { result ->

    if (System.getenv("CI")?.toBoolean() ?: false) {
        def apiToken = System.getenv('PUSHOVER_API_TOKEN')
        def userKey = System.getenv('PUSHOVER_USER_KEY')

        if (apiToken != null && userKey != null) {
            println('Sending build status with Pushover')
            def status = result.failure ? 'failed' : 'success'
            def name = System.getenv('CI_PROJECT_NAME') ?: 'Unknown Project'
            def pipeline = System.getenv('CI_PIPELINE_URL') ?: 'Unknown Url'
            def msg = System.getenv('CI_COMMIT_MESSAGE') ?: 'Unknown commit message'
            def ref = System.getenv('CI_COMMIT_REF_NAME') ?: 'unknown branch'

            def body = new MultipartBody.Builder()
                    .setType(MultipartBody.FORM)
                    .addFormDataPart('token', "$apiToken")
                    .addFormDataPart('user', "$userKey")
                    .addFormDataPart('title', "$name: Build $status")
                    .addFormDataPart('message', "Commit on $ref \n$msg")
                    .addFormDataPart('url', pipeline)
                    .build()

            def req = new Request.Builder()
                    .url('https://api.pushover.net/1/messages.json')
                    .post(body)
                    .build()
            def res = new OkHttpClient().newCall(req)

            println(res.execute().body().string())
        } else {
            println('Skipping notification, Pushover credentials are not present')
        }
    }
}